{"mineWoodLog": {"code": "async function mineWoodLog(bot) {\n  // Find a jungle log nearby\n  const jungleLog = bot.findBlock({\n    matching: block => block.name === \"jungle_log\",\n    maxDistance: 32\n  });\n\n  // If a jungle log is found, mine it\n  if (jungleLog) {\n    bot.chat(\"Found a jungle log, mining it now.\");\n    await mineBlock(bot, \"jungle_log\", 1);\n    bot.chat(\"Mined 1 jungle log.\");\n  } else {\n    bot.chat(\"No jungle log found nearby.\");\n  }\n}", "description": "async function mineWoodLog(bot) {\n    // The function involves searching for a jungle log within a 32-block radius. If a jungle log is found, it proceeds to mine one jungle log. If no jungle log is found, it indicates that no jungle log is nearby.\n}"}, "obtainOakLogs": {"code": "async function obtainOakLogs(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check current inventory for oak logs\n  let oakLogCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n\n  // If we already have 3 or more oak logs, no need to mine more\n  if (oakLogCount >= 3) {\n    bot.chat(\"Already have 3 or more oak logs.\");\n    return;\n  }\n\n  // Explore until we find an oak log\n  const oakLog = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    return bot.findBlock({\n      matching: mcData.blocksByName.oak_log.id,\n      maxDistance: 32\n    });\n  });\n  if (oakLog) {\n    bot.chat(\"Found an oak log, mining it now.\");\n    // Calculate how many more logs we need\n    const logsNeeded = 3 - oakLogCount;\n    await mineBlock(bot, \"oak_log\", logsNeeded);\n    bot.chat(\"Collected enough oak logs.\");\n  } else {\n    bot.chat(\"Could not find any oak logs nearby.\");\n  }\n}", "description": "async function obtainOakLogs(bot) {\n    // The function is about collecting at least 3 oak logs. It first checks the current inventory to see how many oak logs are already available. If there are 3 or more oak logs, it concludes the task. If fewer than 3 logs are present, it explores the surroundings to locate an oak log block. Upon finding an oak log, it calculates the number of additional logs needed and mines the required amount. If no oak logs are found nearby, it indicates the absence of oak logs.\n}"}, "craftCraftingTable": {"code": "async function craftCraftingTable(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if we already have a crafting table\n  const craftingTableItem = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n  if (craftingTableItem) {\n    bot.chat(\"Already have a crafting table.\");\n    return;\n  }\n\n  // Convert logs to planks\n  const logTypes = [\"jungle_log\", \"oak_log\"];\n  for (const logType of logTypes) {\n    const logCount = bot.inventory.count(mcData.itemsByName[logType].id);\n    if (logCount > 0) {\n      const planksToCraft = Math.floor(logCount * 4 / 4); // 4 planks per log\n      await craftItem(bot, logType.replace(\"_log\", \"_planks\"), planksToCraft);\n    }\n  }\n\n  // Craft the crafting table\n  await craftItem(bot, \"crafting_table\", 1);\n  bot.chat(\"Crafted a crafting table.\");\n}", "description": "async function craftCraftingTable(bot) {\n    // The function is about crafting a crafting table if one is not already present in the inventory. It first checks the inventory for an existing crafting table. If none is found, it proceeds to convert available logs (jungle or oak) into planks. The function calculates the number of planks that can be crafted from the logs. After converting logs to planks, it crafts a crafting table using the planks. Finally, it confirms the crafting of the crafting table.\n}"}, "obtainJungleLogs": {"code": "async function obtainJungleLogs(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check current inventory for jungle logs\n  let jungleLogCount = bot.inventory.count(mcData.itemsByName.jungle_log.id);\n\n  // If we already have 3 or more jungle logs, no need to mine more\n  if (jungleLogCount >= 3) {\n    bot.chat(\"Already have 3 or more jungle logs.\");\n    return;\n  }\n\n  // Find a jungle log nearby\n  let jungleLog = bot.findBlock({\n    matching: mcData.blocksByName.jungle_log.id,\n    maxDistance: 32\n  });\n\n  // If a jungle log is not found, explore to find one\n  if (!jungleLog) {\n    bot.chat(\"No jungle log found nearby, exploring to find one.\");\n    jungleLog = await exploreUntil(bot, new Vec3(Math.random(), 0, Math.random()), 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName.jungle_log.id,\n        maxDistance: 32\n      });\n    });\n  }\n\n  // If a jungle log is found, mine it\n  if (jungleLog) {\n    bot.chat(\"Found a jungle log, mining it now.\");\n    // Calculate how many more logs we need\n    const logsNeeded = 3 - jungleLogCount;\n    await mineBlock(bot, \"jungle_log\", logsNeeded);\n    bot.chat(\"Collected enough jungle logs.\");\n  } else {\n    bot.chat(\"Could not find any jungle logs nearby.\");\n  }\n}", "description": "async function obtainJungleLogs(bot) {\n    // The function is about collecting at least 3 jungle logs. It first checks the current inventory to see if there are already 3 or more jungle logs. If not, it searches for a jungle log block within a 32-block radius. If no jungle log is found nearby, it explores the area to locate one. Once a jungle log is found, it mines the necessary number of logs to reach a total of 3. If no jungle logs are found after exploring, it indicates that none could be located nearby.\n}"}, "obtainJungleWood": {"code": "async function obtainJungleWood(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check current inventory for jungle logs\n  let jungleLogCount = bot.inventory.count(mcData.itemsByName.jungle_log.id);\n\n  // If we already have 4 or more jungle logs, no need to mine more\n  if (jungleLogCount >= 4) {\n    bot.chat(\"Already have 4 or more jungle logs.\");\n    return;\n  }\n\n  // Explore until we find a jungle log\n  const jungleLog = await exploreUntil(bot, new Vec3(Math.random(), 0, Math.random()), 60, () => {\n    return bot.findBlock({\n      matching: mcData.blocksByName.jungle_log.id,\n      maxDistance: 32\n    });\n  });\n  if (jungleLog) {\n    bot.chat(\"Found a jungle log, mining it now.\");\n    // Calculate how many more logs we need\n    const logsNeeded = 4 - jungleLogCount;\n    await mineBlock(bot, \"jungle_log\", logsNeeded);\n    bot.chat(\"Collected enough jungle logs.\");\n  } else {\n    bot.chat(\"Could not find any jungle logs nearby.\");\n  }\n}", "description": "async function obtainJungleWood(bot) {\n    // The function is about collecting at least 4 jungle logs. It first checks the current inventory for the number of jungle logs. If there are already 4 or more jungle logs, it stops further actions. If fewer than 4 logs are present, it explores the environment to find a jungle log block. Once a jungle log is found, it mines the necessary number of logs to reach a total of 4. If no jungle logs are found nearby, it indicates the absence of jungle logs.\n}"}, "mineJungleLogs": {"code": "async function mineJungleLogs(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check current inventory for jungle logs\n  let jungleLogCount = bot.inventory.count(mcData.itemsByName.jungle_log.id);\n\n  // If we already have 3 or more jungle logs, no need to mine more\n  if (jungleLogCount >= 3) {\n    bot.chat(\"Already have 3 or more jungle logs.\");\n    return;\n  }\n\n  // Find a jungle log nearby\n  let jungleLog = bot.findBlock({\n    matching: mcData.blocksByName.jungle_log.id,\n    maxDistance: 32\n  });\n\n  // If a jungle log is not found, explore to find one\n  if (!jungleLog) {\n    bot.chat(\"No jungle log found nearby, exploring to find one.\");\n    jungleLog = await exploreUntil(bot, new Vec3(Math.random(), 0, Math.random()), 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName.jungle_log.id,\n        maxDistance: 32\n      });\n    });\n  }\n\n  // If a jungle log is found, mine it\n  if (jungleLog) {\n    bot.chat(\"Found a jungle log, mining it now.\");\n    // Calculate how many more logs we need\n    const logsNeeded = 3 - jungleLogCount;\n    await mineBlock(bot, \"jungle_log\", logsNeeded);\n    bot.chat(\"Collected enough jungle logs.\");\n  } else {\n    bot.chat(\"Could not find any jungle logs nearby.\");\n  }\n}", "description": "async function mineJungleLogs(bot) {\n    // The function is about collecting at least 3 jungle logs. It first checks the current inventory for the number of jungle logs. If there are already 3 or more, it stops further actions. If not, it searches for a jungle log within a certain distance. If no jungle log is found nearby, it explores the area to locate one. Once a jungle log is found, it mines the required number of logs to reach a total of 3.\n}"}, "craftSticks": {"code": "async function craftSticks(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if we have enough planks to craft sticks\n  const junglePlanksCount = bot.inventory.count(mcData.itemsByName.jungle_planks.id);\n  if (junglePlanksCount >= 2) {\n    bot.chat(\"Crafting 4 sticks from jungle planks.\");\n    // Craft 4 sticks using 2 jungle planks\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted 4 sticks.\");\n  } else {\n    bot.chat(\"Not enough planks to craft sticks.\");\n  }\n}", "description": "async function craftSticks(bot) {\n    // The function checks if there are at least 2 jungle planks in the inventory. If there are enough planks, it proceeds to craft 4 sticks using these planks. If there are not enough planks, it indicates that crafting sticks is not possible.\n}"}, "obtainCocoaBeans": {"code": "async function obtainCocoaBeans(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check current inventory for cocoa beans\n  let cocoaBeanCount = bot.inventory.count(mcData.itemsByName.cocoa_beans.id);\n\n  // If we already have 3 or more cocoa beans, no need to collect more\n  if (cocoaBeanCount >= 3) {\n    bot.chat(\"Already have 3 or more cocoa beans.\");\n    return;\n  }\n\n  // Explore until we find a cocoa pod\n  const cocoaPod = await exploreUntil(bot, new Vec3(Math.random(), 0, Math.random()), 60, () => {\n    return bot.findBlock({\n      matching: mcData.blocksByName.cocoa.id,\n      maxDistance: 32\n    });\n  });\n  if (cocoaPod) {\n    bot.chat(\"Found a cocoa pod, harvesting it now.\");\n    // Harvest the cocoa pod\n    await bot.dig(cocoaPod);\n    bot.chat(\"Collected cocoa beans.\");\n  } else {\n    bot.chat(\"Could not find any cocoa pods nearby.\");\n  }\n}", "description": "async function obtainCocoaBeans(bot) {\n    // The function is about collecting cocoa beans if there are fewer than 3 in the inventory. It first checks the current inventory for the number of cocoa beans. If there are already 3 or more, it stops further actions. If fewer than 3, it explores the environment to find a cocoa pod within a certain distance. Upon finding a cocoa pod, it proceeds to harvest it. If no cocoa pod is found, it indicates the absence of nearby cocoa pods.\n}"}, "craftWoodenSword": {"code": "async function craftWoodenSword(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if we already have a wooden sword\n  const woodenSwordItem = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n  if (woodenSwordItem) {\n    bot.chat(\"Already have a wooden sword.\");\n    return;\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft the wooden sword\n  await craftItem(bot, \"wooden_sword\", 1);\n  bot.chat(\"Crafted a wooden sword.\");\n}", "description": "async function craftWoodenSword(bot) {\n    // The function involves crafting a wooden sword if one is not already present in the inventory. It first checks the inventory for an existing wooden sword. If a wooden sword is not found, it places a crafting table near the bot. Then, it proceeds to craft a wooden sword using the crafting table. Once the wooden sword is crafted, it confirms the successful crafting.\n}"}, "craftWoodenHoe": {"code": "async function craftWoodenHoe(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if we already have a wooden hoe\n  const woodenHoeItem = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_hoe.id);\n  if (woodenHoeItem) {\n    bot.chat(\"Already have a wooden hoe.\");\n    return;\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft the wooden hoe\n  await craftItem(bot, \"wooden_hoe\", 1);\n  bot.chat(\"Crafted a wooden hoe.\");\n}", "description": "async function craftWoodenHoe(bot) {\n    // The function checks if a wooden hoe is already present in the inventory. If not, it places a crafting table near the bot. Then, it proceeds to craft a wooden hoe using the crafting table. Once crafted, it confirms the successful creation of the wooden hoe. If the wooden hoe is already in the inventory, it simply acknowledges its presence and exits.\n}"}, "mineCoalOre": {"code": "async function mineCoalOre(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if there is a coal ore block nearby\n  const coalOre = bot.findBlock({\n    matching: mcData.blocksByName.coal_ore.id,\n    maxDistance: 32\n  });\n\n  // If a coal ore block is found, mine it\n  if (coalOre) {\n    bot.chat(\"Found a coal ore, mining it now.\");\n    await mineBlock(bot, \"coal_ore\", 1);\n    bot.chat(\"Mined 1 coal ore.\");\n  } else {\n    bot.chat(\"No coal ore found nearby.\");\n  }\n}", "description": "async function mineCoalOre(bot) {\n    // The function involves searching for a coal ore block within a 32-block radius. If a coal ore block is found, it proceeds to mine one coal ore block. If no coal ore block is found nearby, it indicates that no coal ore is available.\n}"}, "mineCopperOre": {"code": "async function mineCopperOre(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if we have a stone pickaxe\n  let stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n\n  // If not, craft a stone pickaxe\n  if (!stonePickaxe) {\n    bot.chat(\"No stone pickaxe found, crafting one.\");\n\n    // Check if we have enough cobblestone and sticks\n    const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    const stickCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    if (cobblestoneCount < 3) {\n      bot.chat(\"Not enough cobblestone, mining more.\");\n      await mineBlock(bot, \"stone\", 3 - cobblestoneCount);\n    }\n    if (stickCount < 2) {\n      bot.chat(\"Not enough sticks, crafting more.\");\n      await craftItem(bot, \"stick\", 1);\n    }\n\n    // Place a crafting table if needed\n    const craftingTable = bot.findBlock({\n      matching: mcData.blocksByName.crafting_table.id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      bot.chat(\"Placing a crafting table.\");\n      await placeItem(bot, \"crafting_table\", bot.entity.position.offset(1, 0, 0));\n    }\n\n    // Craft the stone pickaxe\n    await craftItem(bot, \"stone_pickaxe\", 1);\n    stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  }\n\n  // Equip the stone pickaxe\n  await bot.equip(stonePickaxe, \"hand\");\n  bot.chat(\"Equipped stone pickaxe.\");\n\n  // Find the copper ore block\n  let copperOre = bot.findBlock({\n    matching: mcData.blocksByName.copper_ore.id,\n    maxDistance: 32\n  });\n\n  // If not found, explore to find one\n  if (!copperOre) {\n    bot.chat(\"No copper ore found nearby, exploring to find one.\");\n    copperOre = await exploreUntil(bot, new Vec3(Math.random(), 0, Math.random()), 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName.copper_ore.id,\n        maxDistance: 32\n      });\n    });\n  }\n\n  // Mine the copper ore if found\n  if (copperOre) {\n    bot.chat(\"Found copper ore, mining it now.\");\n    await mineBlock(bot, \"copper_ore\", 1);\n    bot.chat(\"Mined 1 copper ore.\");\n  } else {\n    bot.chat(\"Could not find any copper ore nearby.\");\n  }\n}", "description": "async function mineCopperOre(bot) {\n    // The function involves mining a copper ore using a stone pickaxe. It first checks if a stone pickaxe is available in the inventory, and if not, it crafts one by ensuring there are enough cobblestones and sticks, and placing a crafting table if necessary. Once the stone pickaxe is crafted or found, it is equipped. The function then searches for a copper ore block within a certain distance. If no copper ore is found nearby, it explores the area until one is located. Once a copper ore block is found, it is mined, and a message is displayed indicating the successful mining of the copper ore.\n}"}, "smeltRawCopper": {"code": "async function smeltRawCopper(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if a furnace is already placed nearby\n  let furnaceBlock = bot.findBlock({\n    matching: mcData.blocksByName.furnace.id,\n    maxDistance: 32\n  });\n\n  // If no furnace is found, place one from the inventory\n  if (!furnaceBlock) {\n    bot.chat(\"No furnace found nearby, placing one.\");\n    await placeItem(bot, \"furnace\", bot.entity.position.offset(1, 0, 0));\n    furnaceBlock = bot.findBlock({\n      matching: mcData.blocksByName.furnace.id,\n      maxDistance: 32\n    });\n  }\n\n  // Smelt 3 raw copper using coal as fuel\n  bot.chat(\"Smelting 3 raw copper.\");\n  await smeltItem(bot, \"raw_copper\", \"coal\", 3);\n  bot.chat(\"Smelted 3 raw copper into copper ingots.\");\n}", "description": "async function smeltRawCopper(bot) {\n    // The function involves smelting 3 raw copper into copper ingots using a furnace and coal as fuel. It first checks if a furnace is placed nearby within a 32-block radius. If no furnace is found, it places a furnace from the inventory at a position offset by one block from the bot's current position. Once the furnace is available, it proceeds to smelt the raw copper using coal. The process concludes with the successful conversion of raw copper into copper ingots.\n}"}, "equipStonePickaxe": {"code": "async function equipStonePickaxe(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Find the stone pickaxe in the inventory\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  if (stonePickaxe) {\n    // Equip the stone pickaxe to the hand\n    await bot.equip(stonePickaxe, \"hand\");\n    bot.chat(\"Stone pickaxe equipped.\");\n  } else {\n    bot.chat(\"No stone pickaxe found in inventory.\");\n  }\n}", "description": "async function equipStonePickaxe(bot) {\n    // The function checks the bot's inventory for a stone pickaxe. If a stone pickaxe is found, it equips the pickaxe in the bot's hand. If no stone pickaxe is found, it indicates that the inventory does not contain one.\n}"}, "mineThreeCoalOre": {"code": "async function mineThreeCoalOre(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if there is a coal ore block nearby\n  let coalOreBlocks = bot.findBlocks({\n    matching: mcData.blocksByName.coal_ore.id,\n    maxDistance: 32,\n    count: 3\n  });\n\n  // If not enough coal ore blocks are found, explore to find more\n  if (coalOreBlocks.length < 3) {\n    bot.chat(\"Not enough coal ore found nearby, exploring to find more.\");\n    await exploreUntil(bot, new Vec3(Math.random(), 0, Math.random()), 60, () => {\n      coalOreBlocks = bot.findBlocks({\n        matching: mcData.blocksByName.coal_ore.id,\n        maxDistance: 32,\n        count: 3\n      });\n      return coalOreBlocks.length >= 3 ? coalOreBlocks : null;\n    });\n  }\n\n  // Mine the coal ore if found\n  if (coalOreBlocks.length >= 3) {\n    bot.chat(\"Found enough coal ore, mining it now.\");\n    await mineBlock(bot, \"coal_ore\", 3);\n    bot.chat(\"Mined 3 coal ore.\");\n  } else {\n    bot.chat(\"Could not find enough coal ore nearby.\");\n  }\n}", "description": "async function mineThreeCoalOre(bot) {\n    // The function involves mining three coal ore blocks. It first checks if there are at least three coal ore blocks within a 32-block radius. If not enough coal ore blocks are found, it explores the surroundings to locate more. Once three or more coal ore blocks are identified, it proceeds to mine them. If successful, it confirms the mining of three coal ore blocks. If not enough coal ore blocks are found, it indicates the failure to locate sufficient coal ore nearby.\n}"}, "mineThreeIronOre": {"code": "async function mineThreeIronOre(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if there are at least 3 iron ore blocks nearby\n  let ironOreBlocks = bot.findBlocks({\n    matching: mcData.blocksByName.iron_ore.id,\n    maxDistance: 32,\n    count: 3\n  });\n\n  // If not enough iron ore blocks are found, explore to find more\n  if (ironOreBlocks.length < 3) {\n    bot.chat(\"Not enough iron ore found nearby, exploring to find more.\");\n    await exploreUntil(bot, new Vec3(Math.random(), 0, Math.random()), 60, () => {\n      ironOreBlocks = bot.findBlocks({\n        matching: mcData.blocksByName.iron_ore.id,\n        maxDistance: 32,\n        count: 3\n      });\n      return ironOreBlocks.length >= 3 ? ironOreBlocks : null;\n    });\n  }\n\n  // Mine the iron ore if found\n  if (ironOreBlocks.length >= 3) {\n    bot.chat(\"Found enough iron ore, mining it now.\");\n    await mineBlock(bot, \"iron_ore\", 3);\n    bot.chat(\"Mined 3 iron ore.\");\n  } else {\n    bot.chat(\"Could not find enough iron ore nearby.\");\n  }\n}", "description": "async function mineThreeIronOre(bot) {\n    // The function is about mining three iron ore blocks. It first checks if there are at least three iron ore blocks within a 32-block radius. If not enough iron ore blocks are found, it explores the area to locate more. Once three or more iron ore blocks are identified, it proceeds to mine them. If successful, it confirms the mining of three iron ore blocks. If not enough iron ore is found, it indicates the failure to locate sufficient iron ore nearby.\n}"}, "craftIronPickaxe": {"code": "async function craftIronPickaxe(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if we already have an iron pickaxe\n  const ironPickaxeItem = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  if (ironPickaxeItem) {\n    bot.chat(\"Already have an iron pickaxe.\");\n    return;\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft the iron pickaxe\n  await craftItem(bot, \"iron_pickaxe\", 1);\n  bot.chat(\"Crafted an iron pickaxe.\");\n}", "description": "async function craftIronPickaxe(bot) {\n    // The function is about crafting an iron pickaxe. It first checks if the bot already has an iron pickaxe in its inventory. If the iron pickaxe is not present, it places a crafting table near the bot. Then, it proceeds to craft an iron pickaxe using the crafting table. Once crafted, it confirms the successful creation of the iron pickaxe.\n}"}, "mineLapisOre": {"code": "async function mineLapisOre(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if there is a lapis ore block nearby\n  const lapisOre = bot.findBlock({\n    matching: mcData.blocksByName.lapis_ore.id,\n    maxDistance: 32\n  });\n  if (lapisOre) {\n    bot.chat(\"Found a lapis ore, preparing to mine it.\");\n\n    // Equip the iron pickaxe\n    const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (ironPickaxe) {\n      await bot.equip(ironPickaxe, \"hand\");\n      bot.chat(\"Equipped iron pickaxe.\");\n\n      // Mine the lapis ore\n      await mineBlock(bot, \"lapis_ore\", 1);\n      bot.chat(\"Mined 1 lapis ore.\");\n    } else {\n      bot.chat(\"No suitable pickaxe found to mine lapis ore.\");\n    }\n  } else {\n    bot.chat(\"No lapis ore found nearby.\");\n  }\n}", "description": "async function mineLapisOre(bot) {\n    // The function involves searching for a lapis ore block within a 32-block radius. If a lapis ore is found, it checks the inventory for an iron pickaxe. If an iron pickaxe is available, it equips the pickaxe and proceeds to mine one lapis ore block. If no iron pickaxe is found, it indicates the absence of a suitable tool. If no lapis ore is found nearby, it notes the lack of lapis ore in the vicinity.\n}"}, "mineGoldOre": {"code": "async function mineGoldOre(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if we have an iron pickaxe\n  let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n\n  // If not, craft an iron pickaxe\n  if (!ironPickaxe) {\n    bot.chat(\"No iron pickaxe found, crafting one.\");\n\n    // Check if we have enough sticks\n    const stickCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    if (stickCount < 2) {\n      bot.chat(\"Not enough sticks, crafting more.\");\n      await craftItem(bot, \"stick\", 1);\n    }\n\n    // Place a crafting table if needed\n    const craftingTable = bot.findBlock({\n      matching: mcData.blocksByName.crafting_table.id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      bot.chat(\"Placing a crafting table.\");\n      await placeItem(bot, \"crafting_table\", bot.entity.position.offset(1, 0, 0));\n    }\n\n    // Craft the iron pickaxe\n    await craftItem(bot, \"iron_pickaxe\", 1);\n    ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  }\n\n  // Equip the iron pickaxe\n  await bot.equip(ironPickaxe, \"hand\");\n  bot.chat(\"Equipped iron pickaxe.\");\n\n  // Find the gold ore block\n  let goldOre = bot.findBlock({\n    matching: mcData.blocksByName.gold_ore.id,\n    maxDistance: 32\n  });\n\n  // If not found, explore to find one\n  if (!goldOre) {\n    bot.chat(\"No gold ore found nearby, exploring to find one.\");\n    goldOre = await exploreUntil(bot, new Vec3(Math.random(), 0, Math.random()), 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName.gold_ore.id,\n        maxDistance: 32\n      });\n    });\n  }\n\n  // Mine the gold ore if found\n  if (goldOre) {\n    bot.chat(\"Found gold ore, mining it now.\");\n    await mineBlock(bot, \"gold_ore\", 1);\n    bot.chat(\"Mined 1 gold ore.\");\n  } else {\n    bot.chat(\"Could not find any gold ore nearby.\");\n  }\n}", "description": "async function mineGoldOre(bot) {\n    // The function is about mining a gold ore using an iron pickaxe. It first checks if an iron pickaxe is available in the inventory, and if not, it crafts one, ensuring there are enough sticks and a crafting table available. Once the iron pickaxe is crafted or found, it is equipped in the hand. The function then searches for a gold ore block within a certain distance. If no gold ore is found nearby, it explores the environment until one is located. Once a gold ore block is found, it is mined using the iron pickaxe.\n}"}, "placeChest": {"code": "async function placeChest(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if there is a chest in the inventory\n  const chestItem = bot.inventory.findInventoryItem(mcData.itemsByName.chest.id);\n  if (!chestItem) {\n    bot.chat(\"No chest found in inventory.\");\n    return;\n  }\n\n  // Determine a position to place the chest\n  const positionToPlace = bot.entity.position.offset(1, 0, 0);\n\n  // Place the chest\n  await placeItem(bot, \"chest\", positionToPlace);\n  bot.chat(\"Placed a chest.\");\n}", "description": "async function placeChest(bot) {\n    // The function checks if there is a chest in the inventory and if not, it stops the process. If a chest is available, it calculates a position next to the bot to place the chest. It then places the chest at the determined position.\n}"}}