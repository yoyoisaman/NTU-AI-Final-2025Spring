{"mineWoodLog": {"code": "async function mineWoodLog(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Function to find a log block\n  function findLog() {\n    const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n    return bot.findBlock({\n      matching: block => logNames.includes(block.name),\n      maxDistance: 32\n    });\n  }\n\n  // Explore until a log is found\n  const logBlock = await exploreUntil(bot, new Vec3(Math.random() * 2 - 1, 0, Math.random() * 2 - 1), 60, findLog);\n  if (logBlock) {\n    bot.chat(`Found a log at ${logBlock.position}. Mining it now.`);\n    await mineBlock(bot, logBlock.name, 1);\n    bot.chat(\"Successfully mined 1 wood log.\");\n  } else {\n    bot.chat(\"Could not find any logs nearby.\");\n  }\n}", "description": "async function mineWoodLog(bot) {\n    // The function is about finding and mining a single wood log. It first defines a helper function to locate a log block within a specified distance. The function then explores the environment in random directions until a log block is found or a time limit is reached. If a log block is found, it proceeds to mine the log. If no log is found within the search area, it indicates that no logs are nearby.\n}"}, "obtainJungleLogs": {"code": "async function obtainJungleLogs(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check current inventory for jungle logs\n  const currentLogs = bot.inventory.count(mcData.itemsByName['jungle_log'].id);\n  const logsNeeded = 10 - currentLogs;\n  if (logsNeeded <= 0) {\n    bot.chat(\"Already have 10 or more jungle logs.\");\n    return;\n  }\n  bot.chat(`Need to collect ${logsNeeded} more jungle logs.`);\n\n  // Function to find a jungle log block\n  function findJungleLog() {\n    return bot.findBlock({\n      matching: mcData.blocksByName['jungle_log'].id,\n      maxDistance: 32\n    });\n  }\n\n  // Explore until enough jungle logs are found\n  for (let i = 0; i < logsNeeded; i++) {\n    const jungleLogBlock = await exploreUntil(bot, new Vec3(Math.random() * 2 - 1, 0, Math.random() * 2 - 1), 60, findJungleLog);\n    if (jungleLogBlock) {\n      bot.chat(`Found a jungle log at ${jungleLogBlock.position}. Mining it now.`);\n      await mineBlock(bot, 'jungle_log', 1);\n    } else {\n      bot.chat(\"Could not find any more jungle logs nearby.\");\n      break;\n    }\n  }\n  bot.chat(\"Finished collecting jungle logs.\");\n}", "description": "async function obtainJungleLogs(bot) {\n    // The function is about collecting a total of 10 jungle logs. It first checks the current inventory to determine how many more jungle logs are needed. If fewer than 10 logs are present, it calculates the number of additional logs required. The function then explores the environment to find jungle log blocks within a certain distance. For each log needed, it attempts to locate and mine a jungle log block. The process continues until the required number of logs is collected or no more logs can be found nearby.\n}"}, "craftWoodenPickaxe": {"code": "async function craftWoodenPickaxe(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if we have enough sticks and planks\n  const sticksNeeded = 2;\n  const planksNeeded = 3;\n  const stickCount = bot.inventory.count(mcData.itemsByName['stick'].id);\n  const plankCount = bot.inventory.count(mcData.itemsByName['jungle_planks'].id);\n  const jungleLogCount = bot.inventory.count(mcData.itemsByName['jungle_log'].id);\n\n  // Convert jungle logs to planks if needed\n  if (plankCount < planksNeeded) {\n    if (jungleLogCount > 0) {\n      const planksToCraft = Math.ceil((planksNeeded - plankCount) / 4);\n      await craftItem(bot, 'jungle_planks', planksToCraft);\n      bot.chat(`Converted jungle logs to wooden planks.`);\n    } else {\n      bot.chat(\"Not enough jungle logs to craft wooden planks.\");\n      return;\n    }\n  }\n\n  // Craft sticks if needed\n  if (stickCount < sticksNeeded) {\n    const planksForSticks = Math.ceil((sticksNeeded - stickCount) / 4);\n    await craftItem(bot, 'stick', planksForSticks);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Check if we have a crafting table\n  const craftingTableItem = bot.inventory.findInventoryItem(mcData.itemsByName['crafting_table'].id);\n  if (!craftingTableItem) {\n    if (plankCount < 4) {\n      bot.chat(\"Not enough planks to craft a crafting table.\");\n      return;\n    }\n    await craftItem(bot, 'crafting_table', 1);\n    bot.chat(\"Crafted a crafting table.\");\n  }\n\n  // Place the crafting table\n  const position = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, 'crafting_table', position);\n  bot.chat(\"Placed a crafting table.\");\n\n  // Craft the wooden pickaxe\n  await craftItem(bot, 'wooden_pickaxe', 1);\n  bot.chat(\"Crafted a wooden pickaxe.\");\n}", "description": "async function craftWoodenPickaxe(bot) {\n    // The function is about crafting a wooden pickaxe. It first checks if there are enough sticks and planks in the inventory. If there are not enough planks, it converts jungle logs into planks. If there are not enough sticks, it crafts them from planks. It then checks for a crafting table in the inventory and crafts one if necessary. The crafting table is placed, and finally, the wooden pickaxe is crafted.\n}"}, "mineCobblestone": {"code": "async function mineCobblestone(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check current inventory for cobblestone\n  const currentCobblestone = bot.inventory.count(mcData.itemsByName['cobblestone'].id);\n  const cobblestoneNeeded = 20 - currentCobblestone;\n  if (cobblestoneNeeded <= 0) {\n    bot.chat(\"Already have 20 or more cobblestone.\");\n    return;\n  }\n  bot.chat(`Need to collect ${cobblestoneNeeded} more cobblestone.`);\n\n  // Check if the bot has a pickaxe and equip it\n  const pickaxe = bot.inventory.findInventoryItem(mcData.itemsByName['wooden_pickaxe'].id);\n  if (pickaxe) {\n    await bot.equip(pickaxe, 'hand');\n  } else {\n    bot.chat(\"No pickaxe found, crafting a wooden pickaxe.\");\n    await craftWoodenPickaxe(bot);\n  }\n\n  // Function to find a stone block\n  function findStone() {\n    return bot.findBlock({\n      matching: mcData.blocksByName['stone'].id,\n      maxDistance: 32\n    });\n  }\n\n  // Explore until a stone block is found\n  const stoneBlock = await exploreUntil(bot, new Vec3(Math.random() * 2 - 1, 0, Math.random() * 2 - 1), 60, findStone);\n  if (stoneBlock) {\n    bot.chat(`Found stone at ${stoneBlock.position}. Mining cobblestone now.`);\n    await mineBlock(bot, 'stone', cobblestoneNeeded);\n    bot.chat(\"Successfully mined the required cobblestone.\");\n  } else {\n    bot.chat(\"Could not find any stone nearby.\");\n  }\n}", "description": "async function mineCobblestone(bot) {\n    // The function checks the bot's inventory for cobblestone and determines how many more are needed to reach a total of 20. If the bot already has 20 or more cobblestones, it exits. If not, it checks for a wooden pickaxe in the inventory and equips it, or crafts one if it's missing. The function then searches for a stone block within a certain distance. Once a stone block is found, it mines the required amount of cobblestone. If no stone block is found, it indicates that no stone is nearby.\n}"}, "craftStonePickaxe": {"code": "async function craftStonePickaxe(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if we have enough materials\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName['cobblestone'].id);\n  const stickCount = bot.inventory.count(mcData.itemsByName['stick'].id);\n  const jungleLogCount = bot.inventory.count(mcData.itemsByName['jungle_log'].id);\n  if (cobblestoneCount < 3) {\n    bot.chat(\"Not enough cobblestones to craft a stone pickaxe.\");\n    return;\n  }\n\n  // Craft sticks if needed\n  if (stickCount < 2) {\n    if (jungleLogCount > 0) {\n      const planksToCraft = Math.ceil((2 - stickCount) / 4);\n      await craftItem(bot, 'jungle_planks', planksToCraft);\n      await craftItem(bot, 'stick', 1);\n      bot.chat(\"Crafted sticks from jungle logs.\");\n    } else {\n      bot.chat(\"Not enough jungle logs to craft sticks.\");\n      return;\n    }\n  }\n\n  // Check if we have a crafting table\n  const craftingTableItem = bot.inventory.findInventoryItem(mcData.itemsByName['crafting_table'].id);\n  if (!craftingTableItem) {\n    if (jungleLogCount >= 4) {\n      await craftItem(bot, 'crafting_table', 1);\n      bot.chat(\"Crafted a crafting table.\");\n    } else {\n      bot.chat(\"Not enough materials to craft a crafting table.\");\n      return;\n    }\n  }\n\n  // Place the crafting table\n  const position = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, 'crafting_table', position);\n  bot.chat(\"Placed a crafting table.\");\n\n  // Craft the stone pickaxe\n  await craftItem(bot, 'stone_pickaxe', 1);\n  bot.chat(\"Crafted a stone pickaxe.\");\n}", "description": "async function craftStonePickaxe(bot) {\n    // The function is about crafting a stone pickaxe. It first checks if there are enough cobblestones and sticks in the inventory. If there are not enough sticks, it attempts to craft them using jungle logs. It also checks for the presence of a crafting table and crafts one if necessary using jungle logs. The function then places the crafting table and proceeds to craft the stone pickaxe.\n}"}, "mineCoalOre": {"code": "async function mineCoalOre(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check current inventory for coal\n  const currentCoal = bot.inventory.count(mcData.itemsByName['coal'].id);\n  const coalNeeded = 10 - currentCoal;\n  if (coalNeeded <= 0) {\n    bot.chat(\"Already have 10 or more coal.\");\n    return;\n  }\n  bot.chat(`Need to collect ${coalNeeded} more coal.`);\n\n  // Check if we have a pickaxe and equip it\n  const pickaxe = bot.inventory.findInventoryItem(mcData.itemsByName['stone_pickaxe'].id) || bot.inventory.findInventoryItem(mcData.itemsByName['wooden_pickaxe'].id);\n  if (pickaxe) {\n    await bot.equip(pickaxe, 'hand');\n    bot.chat(\"Equipped a pickaxe.\");\n  } else {\n    bot.chat(\"No pickaxe available to mine coal.\");\n    return;\n  }\n\n  // Function to find coal ore\n  function findCoalOre() {\n    return bot.findBlock({\n      matching: mcData.blocksByName['coal_ore'].id,\n      maxDistance: 32\n    });\n  }\n\n  // Explore until enough coal ore is found\n  let coalMined = 0;\n  while (coalMined < coalNeeded) {\n    const coalOreBlock = await exploreUntil(bot, new Vec3(Math.random() * 2 - 1, 0, Math.random() * 2 - 1), 60, findCoalOre);\n    if (coalOreBlock) {\n      bot.chat(`Found coal ore at ${coalOreBlock.position}. Mining it now.`);\n      await mineBlock(bot, 'coal_ore', 1);\n      coalMined++;\n      bot.chat(`Mined ${coalMined + currentCoal} coal so far.`);\n    } else {\n      bot.chat(\"Could not find any more coal ore nearby.\");\n      break;\n    }\n  }\n  if (coalMined + currentCoal >= 10) {\n    bot.chat(\"Successfully mined 10 coal.\");\n  } else {\n    bot.chat(`Only mined ${coalMined + currentCoal} coal. Need to find more coal ore.`);\n  }\n}", "description": "async function mineCoalOre(bot) {\n    // The function is about collecting a total of 10 coal items. It first checks the current inventory to determine how many more coal items are needed. If less than 10 coal items are present, it checks for a pickaxe in the inventory and equips it if available. The function then searches for coal ore blocks within a certain distance and mines them until the required amount of coal is collected. If the bot successfully mines enough coal, it confirms the achievement; otherwise, it indicates the need to find more coal ore.\n}"}, "mineCopperOre": {"code": "async function mineCopperOre(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if we have a stone pickaxe or better and equip it\n  let pickaxe = bot.inventory.findInventoryItem(mcData.itemsByName['iron_pickaxe'].id) || bot.inventory.findInventoryItem(mcData.itemsByName['stone_pickaxe'].id);\n  if (!pickaxe) {\n    bot.chat(\"No suitable pickaxe available to mine copper.\");\n    return;\n  }\n  await bot.equip(pickaxe, 'hand');\n  bot.chat(\"Equipped a pickaxe.\");\n\n  // Function to find copper ore\n  function findCopperOre() {\n    return bot.findBlock({\n      matching: mcData.blocksByName['copper_ore'].id,\n      maxDistance: 32\n    });\n  }\n\n  // Check current inventory for raw copper\n  const currentRawCopper = bot.inventory.count(mcData.itemsByName['raw_copper'].id);\n  const copperNeeded = 10 - currentRawCopper;\n  let copperMined = 0;\n\n  // Mine copper ore until we have enough\n  while (copperMined < copperNeeded) {\n    const copperOreBlock = await exploreUntil(bot, new Vec3(Math.random() * 2 - 1, 0, Math.random() * 2 - 1), 60, findCopperOre);\n    if (copperOreBlock) {\n      bot.chat(`Found copper ore at ${copperOreBlock.position}. Mining it now.`);\n      await mineBlock(bot, 'copper_ore', 1);\n      copperMined++;\n      bot.chat(`Mined ${copperMined + currentRawCopper} raw copper so far.`);\n    } else {\n      bot.chat(\"Could not find any more copper ore nearby.\");\n      break;\n    }\n  }\n  if (copperMined + currentRawCopper >= 10) {\n    bot.chat(\"Successfully mined 10 raw copper.\");\n  } else {\n    bot.chat(`Only mined ${copperMined + currentRawCopper} raw copper. Need to find more copper ore.`);\n  }\n}", "description": "async function mineCopperOre(bot) {\n    // The function involves mining raw copper until a total of 10 is obtained. It first checks for a stone or iron pickaxe in the inventory and equips it if available. If no suitable pickaxe is found, the process is halted. The function then calculates how much more raw copper is needed based on the current inventory. It explores the environment to find copper ore blocks and mines them until the required amount of raw copper is collected or no more copper ore can be found nearby. The function provides updates on the progress of mining and whether the goal of 10 raw copper has been achieved.\n}"}, "mineGranite": {"code": "async function mineGranite(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if we have a pickaxe and equip it\n  const pickaxe = bot.inventory.findInventoryItem(mcData.itemsByName['stone_pickaxe'].id) || bot.inventory.findInventoryItem(mcData.itemsByName['wooden_pickaxe'].id);\n  if (pickaxe) {\n    await bot.equip(pickaxe, 'hand');\n    bot.chat(\"Equipped a pickaxe.\");\n  } else {\n    bot.chat(\"No pickaxe available to mine granite.\");\n    return;\n  }\n\n  // Function to find granite\n  function findGranite() {\n    return bot.findBlock({\n      matching: mcData.blocksByName['granite'].id,\n      maxDistance: 32\n    });\n  }\n\n  // Locate and mine 10 granite blocks\n  let graniteMined = 0;\n  while (graniteMined < 10) {\n    const graniteBlock = findGranite();\n    if (graniteBlock) {\n      bot.chat(`Found granite at ${graniteBlock.position}. Mining it now.`);\n      await mineBlock(bot, 'granite', 1);\n      graniteMined++;\n      bot.chat(`Mined ${graniteMined} granite so far.`);\n    } else {\n      bot.chat(\"Could not find any more granite nearby.\");\n      break;\n    }\n  }\n  if (graniteMined >= 10) {\n    bot.chat(\"Successfully mined 10 granite.\");\n  } else {\n    bot.chat(`Only mined ${graniteMined} granite. Need to find more granite.`);\n  }\n}", "description": "async function mineGranite(bot) {\n    // The function involves mining 10 granite blocks using a pickaxe. It first checks the inventory for a stone or wooden pickaxe and equips it if available. If no pickaxe is found, the process is halted. The function then searches for granite blocks within a 32-block radius. Upon finding a granite block, it mines the block and increments the count of mined granite. This process continues until 10 granite blocks are mined or no more granite is found nearby.\n}"}, "mineCoalOreBlocks": {"code": "async function mineCoalOreBlocks(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if we have a pickaxe and equip it\n  const pickaxe = bot.inventory.findInventoryItem(mcData.itemsByName['stone_pickaxe'].id) || bot.inventory.findInventoryItem(mcData.itemsByName['wooden_pickaxe'].id);\n  if (pickaxe) {\n    await bot.equip(pickaxe, 'hand');\n    bot.chat(\"Equipped a pickaxe.\");\n  } else {\n    bot.chat(\"No pickaxe available to mine coal.\");\n    return;\n  }\n\n  // Function to find coal ore\n  function findCoalOre() {\n    return bot.findBlock({\n      matching: mcData.blocksByName['coal_ore'].id,\n      maxDistance: 32\n    });\n  }\n\n  // Explore until enough coal ore is found\n  let coalMined = 0;\n  while (coalMined < 10) {\n    const coalOreBlock = await exploreUntil(bot, new Vec3(Math.random() * 2 - 1, 0, Math.random() * 2 - 1), 60, findCoalOre);\n    if (coalOreBlock) {\n      bot.chat(`Found coal ore at ${coalOreBlock.position}. Mining it now.`);\n      await mineBlock(bot, 'coal_ore', 1);\n      coalMined++;\n      bot.chat(`Mined ${coalMined} coal ore blocks so far.`);\n    } else {\n      bot.chat(\"Could not find any more coal ore nearby.\");\n      break;\n    }\n  }\n  if (coalMined >= 10) {\n    bot.chat(\"Successfully mined 10 coal ore blocks.\");\n  } else {\n    bot.chat(`Only mined ${coalMined} coal ore blocks. Need to find more coal ore.`);\n  }\n}", "description": "async function mineCoalOreBlocks(bot) {\n    // The function involves mining 10 coal ore blocks using a pickaxe. It first checks the inventory for a stone or wooden pickaxe and equips it if available. If no pickaxe is found, the process is halted. The function then searches for coal ore blocks within a specified distance. Upon finding a coal ore block, it mines the block and increments the count of mined coal ore. This process continues until 10 coal ore blocks are mined or no more coal ore is found nearby.\n}"}, "mineIronOre": {"code": "async function mineIronOre(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName['iron_pickaxe'].id);\n  if (ironPickaxe) {\n    await bot.equip(ironPickaxe, 'hand');\n    bot.chat(\"Equipped an iron pickaxe.\");\n  } else {\n    bot.chat(\"No iron pickaxe available to mine iron.\");\n    return;\n  }\n\n  // Function to find iron ore\n  function findIronOre() {\n    return bot.findBlock({\n      matching: mcData.blocksByName['iron_ore'].id,\n      maxDistance: 32\n    });\n  }\n\n  // Check current inventory for raw iron\n  const currentRawIron = bot.inventory.count(mcData.itemsByName['raw_iron'].id);\n  const ironNeeded = 15 - currentRawIron;\n  let ironMined = 0;\n\n  // Mine iron ore until we have enough\n  while (ironMined < ironNeeded) {\n    const ironOreBlock = findIronOre();\n    if (ironOreBlock) {\n      bot.chat(`Found iron ore at ${ironOreBlock.position}. Mining it now.`);\n      await mineBlock(bot, 'iron_ore', 1);\n      ironMined++;\n      bot.chat(`Mined ${ironMined + currentRawIron} iron ore so far.`);\n    } else {\n      bot.chat(\"Could not find any more iron ore nearby.\");\n      break;\n    }\n  }\n  if (ironMined + currentRawIron >= 15) {\n    bot.chat(\"Successfully mined 15 iron ore.\");\n  } else {\n    bot.chat(`Only mined ${ironMined + currentRawIron} iron ore. Need to find more iron ore.`);\n  }\n}", "description": "async function mineIronOre(bot) {\n    // The function involves mining iron ore using an iron pickaxe. It first checks if an iron pickaxe is available in the inventory and equips it. Then, it calculates how much raw iron is needed to reach a total of 15. The function searches for iron ore blocks within a certain distance and mines them one by one until the required amount of raw iron is obtained. If enough iron ore is mined, it confirms success; otherwise, it indicates the need to find more iron ore.\n}"}, "smeltRawIron": {"code": "async function smeltRawIron(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if a furnace is available in the inventory\n  let furnace = bot.inventory.findInventoryItem(mcData.itemsByName['furnace'].id);\n  if (!furnace) {\n    bot.chat(\"No furnace available to smelt raw iron.\");\n    return;\n  }\n\n  // Place the furnace near the bot\n  const position = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, 'furnace', position);\n  bot.chat(\"Placed a furnace.\");\n\n  // Smelt 18 raw iron using coal as fuel\n  await smeltItem(bot, 'raw_iron', 'coal', 18);\n  bot.chat(\"Smelted 18 raw iron into iron ingots.\");\n}", "description": "async function smeltRawIron(bot) {\n    // The function involves smelting 18 raw iron into iron ingots using a furnace and coal as fuel. It first checks if a furnace is available in the inventory. If a furnace is not available, the process is halted. If a furnace is available, it is placed near the bot. The function then proceeds to smelt the raw iron using coal. Once the smelting is complete, the bot confirms the successful conversion of raw iron into iron ingots.\n}"}, "mine10IronOre": {"code": "async function mine10IronOre(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if the bot has a stone pickaxe, if not, craft one\n  let stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName['stone_pickaxe'].id);\n  if (!stonePickaxe) {\n    const cobblestoneCount = bot.inventory.count(mcData.itemsByName['cobblestone'].id);\n    const stickCount = bot.inventory.count(mcData.itemsByName['stick'].id);\n    if (cobblestoneCount >= 3 && stickCount >= 2) {\n      const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName['crafting_table'].id);\n      if (craftingTable) {\n        const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n        await placeItem(bot, 'crafting_table', craftingTablePosition);\n        bot.chat(\"Placed a crafting table.\");\n        await craftItem(bot, 'stone_pickaxe', 1);\n        bot.chat(\"Crafted a stone pickaxe.\");\n      } else {\n        bot.chat(\"No crafting table available to craft a stone pickaxe.\");\n        return;\n      }\n    } else {\n      bot.chat(\"Not enough materials to craft a stone pickaxe.\");\n      return;\n    }\n  }\n\n  // Equip the stone pickaxe\n  stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName['stone_pickaxe'].id);\n  if (stonePickaxe) {\n    await bot.equip(stonePickaxe, 'hand');\n    bot.chat(\"Equipped a stone pickaxe.\");\n  } else {\n    bot.chat(\"No stone pickaxe available to mine iron.\");\n    return;\n  }\n\n  // Function to find iron ore\n  function findIronOre() {\n    return bot.findBlock({\n      matching: mcData.blocksByName['iron_ore'].id,\n      maxDistance: 32\n    });\n  }\n\n  // Explore until enough iron ore is found\n  const currentRawIron = bot.inventory.count(mcData.itemsByName['raw_iron'].id);\n  const ironNeeded = 10 - currentRawIron;\n  let ironMined = 0;\n  while (ironMined < ironNeeded) {\n    const ironOreBlock = await exploreUntil(bot, new Vec3(Math.random() * 2 - 1, 0, Math.random() * 2 - 1), 60, findIronOre);\n    if (ironOreBlock) {\n      bot.chat(`Found iron ore at ${ironOreBlock.position}. Mining it now.`);\n      await mineBlock(bot, 'iron_ore', 1);\n      ironMined++;\n      bot.chat(`Mined ${ironMined + currentRawIron} iron ore so far.`);\n    } else {\n      bot.chat(\"Could not find any more iron ore nearby.\");\n      break;\n    }\n  }\n  if (ironMined + currentRawIron >= 10) {\n    bot.chat(\"Successfully mined 10 iron ore.\");\n  } else {\n    bot.chat(`Only mined ${ironMined + currentRawIron} iron ore. Need to find more iron ore.`);\n  }\n}", "description": "async function mine10IronOre(bot) {\n    // The function involves mining 10 iron ore using a stone pickaxe. It first checks if a stone pickaxe is available in the inventory, and if not, attempts to craft one using cobblestone and sticks, provided a crafting table is available. Once the stone pickaxe is equipped, the function searches for iron ore blocks within a certain distance. It continues to explore and mine iron ore until a total of 10 iron ore is collected. If the required amount of iron ore is mined, it confirms the success; otherwise, it indicates the need to find more iron ore.\n}"}, "mineLapisLazuliOre": {"code": "async function mineLapisLazuliOre(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Ensure the stone pickaxe is equipped\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName['stone_pickaxe'].id);\n  if (stonePickaxe) {\n    await bot.equip(stonePickaxe, 'hand');\n    bot.chat(\"Equipped a stone pickaxe.\");\n  } else {\n    bot.chat(\"No stone pickaxe available to mine lapis lazuli.\");\n    return;\n  }\n\n  // Function to find lapis lazuli ore\n  function findLapisOre() {\n    return bot.findBlock({\n      matching: mcData.blocksByName['lapis_ore'].id,\n      maxDistance: 32\n    });\n  }\n\n  // Mine 5 lapis lazuli ore\n  let lapisMined = 0;\n  while (lapisMined < 5) {\n    const lapisOreBlock = findLapisOre();\n    if (lapisOreBlock) {\n      bot.chat(`Found lapis lazuli ore at ${lapisOreBlock.position}. Mining it now.`);\n      await mineBlock(bot, 'lapis_ore', 1);\n      lapisMined++;\n      bot.chat(`Mined ${lapisMined} lapis lazuli ore so far.`);\n    } else {\n      bot.chat(\"Could not find any more lapis lazuli ore nearby.\");\n      break;\n    }\n  }\n  if (lapisMined >= 5) {\n    bot.chat(\"Successfully mined 5 lapis lazuli ore.\");\n  } else {\n    bot.chat(`Only mined ${lapisMined} lapis lazuli ore. Need to find more lapis lazuli ore.`);\n  }\n}", "description": "async function mineLapisLazuliOre(bot) {\n    // The function involves mining 5 lapis lazuli ores using a stone pickaxe. It first checks if a stone pickaxe is available in the inventory and equips it. If no stone pickaxe is found, the process is halted. The function then searches for lapis lazuli ore blocks within a certain distance. Upon finding an ore block, it mines the block and increments the count of mined ores. The process continues until 5 ores are mined or no more ores are found nearby.\n}"}, "craftIronPickaxe": {"code": "async function craftIronPickaxe(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if we have enough sticks\n  const stickCount = bot.inventory.count(mcData.itemsByName['stick'].id);\n  const sticksNeeded = 2;\n  if (stickCount < sticksNeeded) {\n    const junglePlanksCount = bot.inventory.count(mcData.itemsByName['jungle_planks'].id);\n    const jungleLogsCount = bot.inventory.count(mcData.itemsByName['jungle_log'].id);\n\n    // Convert jungle logs to planks if needed\n    if (junglePlanksCount < 2 && jungleLogsCount > 0) {\n      const planksToCraft = Math.ceil((sticksNeeded - stickCount) / 4);\n      await craftItem(bot, 'jungle_planks', planksToCraft);\n      bot.chat(\"Converted jungle logs to jungle planks.\");\n    }\n\n    // Craft sticks\n    await craftItem(bot, 'stick', 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Check if we have a crafting table\n  const craftingTableItem = bot.inventory.findInventoryItem(mcData.itemsByName['crafting_table'].id);\n  if (!craftingTableItem) {\n    const junglePlanksCount = bot.inventory.count(mcData.itemsByName['jungle_planks'].id);\n    if (junglePlanksCount >= 4) {\n      await craftItem(bot, 'crafting_table', 1);\n      bot.chat(\"Crafted a crafting table.\");\n    } else {\n      bot.chat(\"Not enough planks to craft a crafting table.\");\n      return;\n    }\n  }\n\n  // Place the crafting table\n  const position = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, 'crafting_table', position);\n  bot.chat(\"Placed a crafting table.\");\n\n  // Craft the iron pickaxe\n  await craftItem(bot, 'iron_pickaxe', 1);\n  bot.chat(\"Crafted an iron pickaxe.\");\n}", "description": "async function craftIronPickaxe(bot) {\n    // The function is about crafting an iron pickaxe. It first checks if there are enough sticks in the inventory, and if not, it crafts sticks using jungle planks or converts jungle logs to planks if necessary. It then checks for a crafting table in the inventory, crafting one if there are enough jungle planks available. The crafting table is placed next to the bot if needed. Finally, the function crafts an iron pickaxe using the crafting table.\n}"}, "smeltRawCopper": {"code": "async function smeltRawCopper(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if a furnace is available in the inventory\n  let furnace = bot.inventory.findInventoryItem(mcData.itemsByName['furnace'].id);\n  if (!furnace) {\n    bot.chat(\"No furnace available to smelt raw copper.\");\n    return;\n  }\n\n  // Place the furnace near the bot\n  const position = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, 'furnace', position);\n  bot.chat(\"Placed a furnace.\");\n\n  // Smelt 23 raw copper using coal as fuel\n  await smeltItem(bot, 'raw_copper', 'coal', 23);\n  bot.chat(\"Smelted 23 raw copper into copper ingots.\");\n}", "description": "async function smeltRawCopper(bot) {\n    // The function involves smelting 23 raw copper into copper ingots using a furnace and coal as fuel. It first checks if a furnace is available in the inventory. If a furnace is not found, the process is halted. If a furnace is available, it is placed near the bot. The function then proceeds to smelt the raw copper using coal. Once the smelting is complete, the bot confirms the successful conversion of raw copper into copper ingots.\n}"}, "mineDiamondOre": {"code": "async function mineDiamondOre(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Ensure the iron pickaxe is equipped\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName['iron_pickaxe'].id);\n  if (ironPickaxe) {\n    await bot.equip(ironPickaxe, 'hand');\n    bot.chat(\"Equipped an iron pickaxe.\");\n  } else {\n    bot.chat(\"No iron pickaxe available to mine diamond.\");\n    return;\n  }\n\n  // Function to find diamond ore\n  function findDiamondOre() {\n    return bot.findBlock({\n      matching: mcData.blocksByName['diamond_ore'].id,\n      maxDistance: 32\n    });\n  }\n\n  // Explore until enough diamond ore is found\n  let diamondsMined = 0;\n  while (diamondsMined < 5) {\n    // Use a valid direction vector with values of -1, 0, or 1\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, -1, Math.floor(Math.random() * 3) - 1);\n    const diamondOreBlock = await exploreUntil(bot, direction, 60, findDiamondOre);\n    if (diamondOreBlock) {\n      bot.chat(`Found diamond ore at ${diamondOreBlock.position}. Mining it now.`);\n      await mineBlock(bot, 'diamond_ore', 1);\n      diamondsMined++;\n      bot.chat(`Mined ${diamondsMined} diamond ore so far.`);\n    } else {\n      bot.chat(\"Could not find any more diamond ore nearby.\");\n      break;\n    }\n  }\n  if (diamondsMined >= 5) {\n    bot.chat(\"Successfully mined 5 diamond ore.\");\n  } else {\n    bot.chat(`Only mined ${diamondsMined} diamond ore. Need to find more diamond ore.`);\n  }\n}", "description": "async function mineDiamondOre(bot) {\n    // The function involves mining 5 diamond ores using an iron pickaxe. It first checks if an iron pickaxe is available in the inventory and equips it. If the pickaxe is not available, the process is halted. The function then searches for diamond ore blocks within a specified distance. Upon finding a diamond ore block, it mines the block and increments the count of mined diamonds. The process continues until 5 diamond ores are mined or no more diamond ores are found nearby.\n}"}, "mineGoldOre": {"code": "async function mineGoldOre(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Equip an iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName['iron_pickaxe'].id);\n  if (ironPickaxe) {\n    await bot.equip(ironPickaxe, 'hand');\n    bot.chat(\"Equipped an iron pickaxe.\");\n  } else {\n    bot.chat(\"No iron pickaxe available to mine gold.\");\n    return;\n  }\n\n  // Function to find gold ore\n  function findGoldOre() {\n    return bot.findBlock({\n      matching: mcData.blocksByName['gold_ore'].id,\n      maxDistance: 32\n    });\n  }\n\n  // Mine 10 gold ore\n  let goldMined = 0;\n  while (goldMined < 10) {\n    const goldOreBlock = findGoldOre();\n    if (goldOreBlock) {\n      bot.chat(`Found gold ore at ${goldOreBlock.position}. Mining it now.`);\n      await mineBlock(bot, 'gold_ore', 1);\n      goldMined++;\n      bot.chat(`Mined ${goldMined} gold ore so far.`);\n    } else {\n      bot.chat(\"Could not find any more gold ore nearby.\");\n      break;\n    }\n  }\n  if (goldMined >= 10) {\n    bot.chat(\"Successfully mined 10 gold ore.\");\n  } else {\n    bot.chat(`Only mined ${goldMined} gold ore. Need to find more gold ore.`);\n  }\n}", "description": "async function mineGoldOre(bot) {\n    // The function involves mining 10 gold ore blocks using an iron pickaxe. It first checks if an iron pickaxe is available in the inventory and equips it. If no iron pickaxe is found, the process stops. The function then searches for gold ore blocks within a certain distance. Upon finding a gold ore block, it mines the block and increments the count of mined gold ore. The process continues until 10 gold ore blocks are mined or no more gold ore is found nearby.\n}"}, "smeltRawGold": {"code": "async function smeltRawGold(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if a furnace is available in the inventory\n  let furnace = bot.inventory.findInventoryItem(mcData.itemsByName['furnace'].id);\n  if (!furnace) {\n    bot.chat(\"No furnace available to smelt raw gold.\");\n    return;\n  }\n\n  // Place the furnace near the bot\n  const position = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, 'furnace', position);\n  bot.chat(\"Placed a furnace.\");\n\n  // Smelt 5 raw gold using coal as fuel\n  await smeltItem(bot, 'raw_gold', 'coal', 5);\n  bot.chat(\"Smelted 5 raw gold into gold ingots.\");\n}", "description": "async function smeltRawGold(bot) {\n    // The function involves smelting raw gold into gold ingots. It first checks if a furnace is available in the inventory. If a furnace is not found, the process is halted. If a furnace is available, it is placed near the bot. The function then proceeds to smelt 5 raw gold using coal as fuel. Once the smelting is complete, the raw gold is converted into gold ingots.\n}"}, "craftDiamondPickaxe": {"code": "async function craftDiamondPickaxe(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check for sticks in the inventory\n  const stickCount = bot.inventory.count(mcData.itemsByName['stick'].id);\n  const sticksNeeded = 2;\n  if (stickCount < sticksNeeded) {\n    const jungleLogCount = bot.inventory.count(mcData.itemsByName['jungle_log'].id);\n    if (jungleLogCount > 0) {\n      const planksToCraft = Math.ceil((sticksNeeded - stickCount) / 4);\n      await craftItem(bot, 'jungle_planks', planksToCraft);\n      await craftItem(bot, 'stick', 1);\n      bot.chat(\"Crafted sticks from jungle logs.\");\n    } else {\n      bot.chat(\"Not enough jungle logs to craft sticks.\");\n      return;\n    }\n  }\n\n  // Check if a crafting table is placed\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName['crafting_table'].id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const position = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, 'crafting_table', position);\n    bot.chat(\"Placed a crafting table.\");\n  }\n\n  // Craft the diamond pickaxe\n  await craftItem(bot, 'diamond_pickaxe', 1);\n  bot.chat(\"Crafted a diamond pickaxe.\");\n}", "description": "async function craftDiamondPickaxe(bot) {\n    // The function is about crafting a diamond pickaxe. It first checks if there are enough sticks in the inventory, and if not, it attempts to craft sticks using jungle logs. If jungle logs are available, it crafts the necessary planks and sticks. It then checks for the presence of a crafting table nearby and places one if needed. Finally, it crafts the diamond pickaxe using the available resources.\n}"}, "placeChest": {"code": "async function placeChest(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Check if the bot has a chest in the inventory\n  const chestItem = bot.inventory.findInventoryItem(mcData.itemsByName['chest'].id);\n  if (!chestItem) {\n    bot.chat(\"No chest available in inventory to place.\");\n    return;\n  }\n\n  // Find a suitable position to place the chest\n  const botPosition = bot.entity.position;\n  const directions = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  let placePosition = null;\n  for (const direction of directions) {\n    const position = botPosition.plus(direction);\n    const block = bot.blockAt(position);\n    if (block && block.name === 'air') {\n      placePosition = position;\n      break;\n    }\n  }\n  if (placePosition) {\n    bot.chat(`Placing chest at ${placePosition}.`);\n    await placeItem(bot, 'chest', placePosition);\n    bot.chat(\"Chest placed successfully.\");\n  } else {\n    bot.chat(\"No suitable location found to place the chest.\");\n  }\n}", "description": "async function placeChest(bot) {\n    // The function involves placing a chest in the game world. It first checks if there is a chest available in the bot's inventory. If a chest is available, it searches for a suitable position adjacent to the bot to place the chest. The function checks in four possible directions around the bot for an empty space. If an empty space is found, the chest is placed at that location. If no suitable location is found, it indicates that placement is not possible.\n}"}, "mineDeepslate": {"code": "async function mineDeepslate(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Equip the diamond pickaxe for mining deepslate\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName['diamond_pickaxe'].id);\n  if (diamondPickaxe) {\n    await bot.equip(diamondPickaxe, 'hand');\n    bot.chat(\"Equipped a diamond pickaxe for mining deepslate.\");\n  } else {\n    bot.chat(\"No diamond pickaxe available.\");\n    return;\n  }\n\n  // Function to find deepslate\n  function findDeepslate() {\n    return bot.findBlock({\n      matching: mcData.blocksByName['deepslate'].id,\n      maxDistance: 32\n    });\n  }\n\n  // Mine 20 deepslate blocks\n  const deepslateNeeded = 20;\n  const deepslateBlock = findDeepslate();\n  if (deepslateBlock) {\n    bot.chat(`Found deepslate at ${deepslateBlock.position}. Mining now.`);\n    await mineBlock(bot, 'deepslate', deepslateNeeded);\n    bot.chat(\"Successfully mined 20 deepslate blocks.\");\n  } else {\n    bot.chat(\"Could not find any deepslate nearby.\");\n  }\n}", "description": "async function mineDeepslate(bot) {\n    // The function involves mining 20 deepslate blocks using a diamond pickaxe. It first checks if a diamond pickaxe is available in the inventory. If available, the pickaxe is equipped for mining. A helper function is used to locate deepslate blocks within a certain distance. If a deepslate block is found, the function proceeds to mine 20 deepslate blocks. If no deepslate is found, the function indicates that no deepslate is nearby.\n}"}, "mineDeepslateDiamondOre": {"code": "async function mineDeepslateDiamondOre(bot) {\n  const mcData = require('minecraft-data')(bot.version);\n\n  // Equip the diamond pickaxe for mining deepslate diamond ore\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName['diamond_pickaxe'].id);\n  if (diamondPickaxe) {\n    await bot.equip(diamondPickaxe, 'hand');\n    bot.chat(\"Equipped a diamond pickaxe for mining deepslate diamond ore.\");\n  } else {\n    bot.chat(\"No diamond pickaxe available.\");\n    return;\n  }\n\n  // Function to find deepslate diamond ore\n  function findDeepslateDiamondOre() {\n    return bot.findBlock({\n      matching: mcData.blocksByName['deepslate_diamond_ore'].id,\n      maxDistance: 32\n    });\n  }\n\n  // Mine 10 deepslate diamond ore\n  let diamondsMined = 0;\n  while (diamondsMined < 10) {\n    const direction = new Vec3(Math.floor(Math.random() * 3) - 1, -1, Math.floor(Math.random() * 3) - 1);\n    const diamondOreBlock = await exploreUntil(bot, direction, 60, findDeepslateDiamondOre);\n    if (diamondOreBlock) {\n      bot.chat(`Found deepslate diamond ore at ${diamondOreBlock.position}. Mining it now.`);\n      await mineBlock(bot, 'deepslate_diamond_ore', 1);\n      diamondsMined++;\n      bot.chat(`Mined ${diamondsMined} deepslate diamond ore so far.`);\n    } else {\n      bot.chat(\"Could not find any more deepslate diamond ore nearby.\");\n      break;\n    }\n  }\n  if (diamondsMined >= 10) {\n    bot.chat(\"Successfully mined 10 deepslate diamond ore.\");\n  } else {\n    bot.chat(`Only mined ${diamondsMined} deepslate diamond ore. Need to find more deepslate diamond ore.`);\n  }\n}", "description": "async function mineDeepslateDiamondOre(bot) {\n    // The function involves mining 10 deepslate diamond ores using a diamond pickaxe. It first checks if a diamond pickaxe is available in the inventory and equips it. Then, it defines a helper function to locate deepslate diamond ore blocks within a certain distance. The function enters a loop to explore the surroundings and mine deepslate diamond ore blocks until 10 are collected. If a block is found, it is mined, and the count of mined ores is updated. The process continues until either 10 ores are mined or no more ores can be found nearby.\n}"}}